<%- include("partials/header"); -%>

<!-- TODO: Backend Database Modelling -->
<div class="d-flex justify-content-center align-items-center h-100">
    <button type="button" class="btn btn-success order" data-bs-toggle="collapse" data-bs-target="#billing">NEW ORDER</button>
</div>

<div class="row h-100 collapse" id="billing">

    <div class="col-6">
        <!-- Invoice#, Customer Details (Flat#, Contact#, Person), Time, Products, Total, Payment Mode -->
        <% const baseId = 10000; // Starting ID number
        const randomString = Math.random().toString(36).substring(2, 8).toUpperCase(); // Random string of 6 characters
        const invoiceId = `${baseId + Math.floor(Math.random() * 1000)}-${randomString}`; // Combine base ID, random number, and random string %>
        <!-- TODO: Form Control for table to submit to database -->
        <!-- *Completed -->
        <h4>#<%= invoiceId %></h4>
        <div class="d-flex justify-content-between align-items-center my-3">
            <span id="dayDate" style="padding: 12px 0px;"></span>
            <!-- TODO: Time should be dynamically update as billing appears on screen -->
            <!-- * Completed -->
            <span id="time" style="padding: 12px 0px;"></span>
        </div>
        <form id="invoiceForm" action="/" method="post">
            <input type="hidden" name="invoiceId" value="#<%=invoiceId%>" required>
            <div class="row g-2 my-4">
                <!-- TODO: Search for Flat# -->
                <!-- *Completed -->
                <div class="col">
                    <div class="form-floating">
                        <input type="text" class="form-control" id="floatingInputFlat" name="flat" placeholder="Flat #" required autocomplete="off">
                        <label for="floatingInputFlat">Flat#</label>
                    </div>
                    <ul class="list-group" id="searchFlat">

                    </ul>
                </div>
                <div class="col">
                    <div class="form-floating">
                        <input type="tel" class="form-control" id="floatingInputContact" name="contact" placeholder="Contact #">
                        <label for="floatingInputContact">Contact</label>
                    </div>
                </div>
                <div class="col">
                    <div class="form-floating">
                        <select class="form-select" id="floatingSelectPerson" name="person" required>
                            <option selected disabled value="">Open this</option>
                            <option value="1">Sir</option>
                            <option value="2">Madam</option>
                            <option value="3">Children</option>
                            <option value="4">Driver</option>
                            <option value="5">Maid</option>
                            <option value="6">Security</option>
                            <option value="7">Shop Delivery</option>
                        </select>
                        <label for="floatingSelectPerson">Person</label>
                    </div>
                </div>
            </div>
            <table class="table table-hover billing my-3">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">QTY</th>
                        <th scope="col">Each</th>
                        <th scope="col">Total</th>
                    </tr>
                </thead>
                <!-- ? TODO: How to design the data model to submit along with the form -->
                <tbody></tbody>
            </table>
            <div class="text-end my-3">
                <!-- <p>Sub Total:
                    <span id="subtotal-amount" class="ms-5">0
                </p>
                <p>Tax:
                    <span id="tax" class="ms-5">0
                </p> -->
                <h5>Total:
                    <span id="total-amount" class="ms-5">0
                </h5>
                <input id="invoiceTotal" type="hidden" name="invoiceTotal" required>
                <input id="billedProducts" type="hidden" name="prods" required>
            </div>
            <!-- TODO: Stock Deduction from Inventory after Submitting, Invoice generation -->
            <div class="d-flex justify-content-around my-5 payment-btns">
                <button type="submit" class="btn btn-outline-danger w-25" name="paymentMode" value="1">UNPAID</button>
                <button type="submit" class="btn btn-outline-warning w-25" name="paymentMode" value="2">CASH</button>
                <button type="submit" class="btn btn-success w-25" name="paymentMode" value="3">UPI</button>
                <input id="billingStartTime" type="hidden" name="billTime.start">
                <button type="submit" class="hiddenSubmitBtn prod-modal" data-bs-toggle="modal" data-bs-target="#prodModal"></button>
                <!-- Modal -->
                <div class="modal fade" id="prodModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Error</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        There are no Products!
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Okay</button>
                    </div>
                    </div>
                </div>
                </div>
            </div>
        </form>
    </div>

    <div class="col-6 overflow-y-auto products">
        <h4 class="pb-3">Products</h4>
        <!-- TODO: Search for products -->
        <!-- <form class="form-inline my-3">
            <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
            <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
        </form> -->
        <%  var iter = 0;
            Object.keys(inventory).forEach((category) => {
            const categoryProducts = inventory[category];
            %>
        <div class="card my-2">
            <div class="card-body d-flex justify-content-between align-items-center" data-bs-toggle="collapse"
                data-bs-target="#products<%=iter%>" style="cursor: pointer">
                <h5 class="card-title"><%= category %></h5>
                <img src="https://www.lalpathlabs.com/blog/wp-content/uploads/2019/01/Fruits-and-Vegetables.jpg"
                    style="height:4rem;" alt="Card image cap">
            </div>
            <div class="collapse" id="products<%=iter%>">
                <div class="wrapper d-flex flex-row overflow-x-auto">
                    <% categoryProducts.forEach((product) => { %>
                    <div class="card me-3">
                        <input type="checkbox" class="product-select h-100 w-100 position-absolute" data-name="<%=product.name%>" data-price1="<%= product.price.MRP %>" data-price2="<%= product.price.SP %>">
                        <img class="card-img-top"
                            src="https://www.lalpathlabs.com/blog/wp-content/uploads/2019/01/Fruits-and-Vegetables.jpg">
                        <div class="card-body">
                            <div class="card-text">
                                <b><%= product.name %></b>
                            </div>
                            <div class="card-text pt-1" style="font-size: 0.8rem;">
                                <%= product.units ? product.units : 'No data' %>
                            </div>
                            <div class="card-text pt-3" style="font-size: 0.75rem">
                                <del><%= product.price.MRP ? product.price.MRP?.toLocaleString("en-IN", {style:'currency', currency:'INR'})  : 'No data' %></del>
                            </div>
                            <div class="card-title pt-1">
                                <%= product.price.SP ?product.price.SP?.toLocaleString("en-IN", {style:'currency', currency:'INR'}) : 'No data' %>
                            </div>
                        </div>
                    </div>
                    <% }) %>
                </div>
            </div>
        </div>
        <% iter++; %>
        <% }) %>
    </div>
</div>

<script>
    // Add a click event listener to the button
    document.querySelector('.order').addEventListener('click', function () { // Toggle the button visibility
        let heading = document.createElement('h3')
        heading.innerHTML = 'Invoice in a Snap';
        heading.classList.add('my-3');
        document.querySelector('.main').insertBefore(heading, document.querySelector('.main').firstChild);
        this.parentNode.remove();
        // Create a new Date object
        const now = new Date();
        const options = {
            timeZone: "Asia/Kolkata",
            hour12: false,
            weekday: "long",
            year: "numeric",
            month: "numeric",
            day: "numeric",
            hour: "numeric",
            minute: "numeric",
            second: "numeric"
        };
        const dateTimeFormat = new Intl.DateTimeFormat("en-IN", options);
        var [
            weekday,
            date,
            time
        ] = dateTimeFormat.format(now).split(", ");
        document.getElementById("dayDate").innerHTML = weekday + " " + date;
        document.getElementById("time").innerHTML = time;
        document.getElementById("billingStartTime").value = time; 
    });

    //Get the Search Field of Flats
    const searchResults = document.querySelector('#searchFlat');
    const i = document.querySelector('#floatingInputFlat');

    i.addEventListener('keyup', async (e) => {
        const inputValue = e.target.value.trim();
        
        if (inputValue === '') {
            searchResults.innerHTML = '';
            return;
        }
        
        axios.post("/getFlats", {payload: e.target.value}).then(res => {
            let payload = res.data.payload;
            // console.log(payload);
            searchResults.innerHTML = '';
        
            if (payload.length < 1) {
                searchResults.innerHTML = '<p>No Results Found</p>';
            return;
            };
            
            payload.forEach((item) => {
                let listItem = document.createElement("a");
                listItem.classList.add("list-group-item");
                listItem.classList.add("list-group-item-action");
                listItem.setAttribute("onclick", "displayFlat('"+item.flat+"')");
                // TODO: Computation has to be changed for expected results
                // Display matched part in bold text
                // let flat = "<b>" + item.flat.substr(0, inputValue.length) + "</b>";
                // flat += item.flat.substr(inputValue.length);
                // Display the value in Results
                listItem.innerHTML = item.flat;
                document.querySelector("#searchFlat").appendChild(listItem);
            });
        });
    });

    // Display Selected Value in Search Field
    function displayFlat(value) {
        i.value = value;
        // Inititally clear the search field results list
        clearValues();
    };

    // Clearing Search Field Results
    function clearValues() {
        let items = document.querySelectorAll(".list-group-item");
        items.forEach((item) => {
            item.remove();
        });
    };

    // Get the product checkboxes and billing table
    const productSelects = document.querySelectorAll('.product-select');
    const billingTableBody = document.querySelector('.billing tbody');
    const totalAmountSpan = document.querySelector('#total-amount');

    // Define a function to update the billing table and total amount
    function updateBilling() {
        let totalAmount = 0;
        let prods = [];
        billingTableBody.innerHTML = '';
        // Loop through all selected products
        productSelects.forEach((product) => {
            if (product.checked) {
                const prodName = product.dataset.name;
                const prodMRP = parseFloat(product.dataset.price1);
                const prodSP = parseFloat(product.dataset.price2);
                const prodQty = product.dataset.qty;
                const prodTotal = prodSP * prodQty;
                // Create a new row in the billing table for the product
                const newRow = document.createElement("tr");
                newRow.innerHTML = `
                    <td>${prodName}</td>
                    <td>
                        <button class="btn btn-sm btn-danger qty-dec" data-name="${prodName}">-</button>
                        <span class="mx-2 qty-span">${prodQty}</span>
                        <button class="btn btn-sm btn-success qty-inc" data-name="${prodName}">+</button>
                    </td>
                    <td>${prodSP?.toLocaleString("en-IN", {style:'currency', currency:'INR'})}</td>
                    <td>${prodTotal?.toLocaleString("en-IN", {style:'currency', currency:'INR'})}</td>`;
                billingTableBody.appendChild(newRow);
                // Add the Product Row Info to prods
                prods.push({name: prodName, price : {MRP : prodMRP, SP: prodSP}, qty: prodQty, subTotal: prodTotal});
                // Add the product total to the total amount
                totalAmount += prodTotal;
            }
        });
        // Update the Billed Products for Invoice Submission
        document.getElementById('billedProducts').value = JSON.stringify(prods);
        // Update the total amount in the billing table
        totalAmountSpan.textContent = totalAmount?.toLocaleString("en-IN", {style:'currency', currency:'INR'});
        // Update the Invoice Total Amount for Submission
        document.getElementById('invoiceTotal').value = totalAmount;
    }

    // Add event listeners to the product checkboxes
    productSelects.forEach((productSelect) => {
        productSelect.addEventListener("change", (e) => {
            // Get the dataset values for the selected product
            const prodName = e.target.dataset.name;
            const MRP = parseFloat(e.target.dataset.price1);
            const SP = parseFloat(e.target.dataset.price2);
            // Check if the produst is being added or removed
            if (e.target.checked) {
                // Add the product to the billing table with default quantity 1
                e.target.dataset.qty = parseInt(1);
                updateBilling();
            } else {
                // Remove the product from the billing table
                const rowsToRemove = Array.from(billingTableBody.querySelectorAll("tr")).filter((row) => row.cells[0].textContent === prodName);
                rowsToRemove.forEach(row => row.remove());
                // Reset the quantity of the product checkbox
                e.target.dataset.qty = null;
                //Update the total amount in the billing
                updateBilling();
            }
        });
    });

    // Add event listeners to the quantity buttons
    billingTableBody.addEventListener("click", (e) => {
        if (e.target.classList.contains("qty-inc")) {
            // Increment the quantity of the corresponding product
            const prodName = e.target.dataset.name;
            const productSelect = Array.from(productSelects).find((select) => select.dataset.name === prodName);
            const prodQty = parseInt(productSelect.dataset.qty) || 1;
            productSelect.dataset.qty = prodQty + 1;
            // Update the billing
            updateBilling();
        } else if (e.target.classList.contains("qty-dec")) {
            // Decrement the quantity of the quantity of the corresponding product
            const prodName = e.target.dataset.name;
            const productSelect = Array.from(productSelects).find((select) => select.dataset.name === prodName);
            const prodQty = parseInt(productSelect.dataset.qty) || 1;
            if (prodQty > 1) {
                productSelect.dataset.qty = prodQty - 1;
                // Update the billing
                updateBilling();
            }
        }
    });

    var invoiceForm = document.getElementById("invoiceForm");

    invoiceForm.addEventListener('submit', function(e)  {
        e.preventDefault();
        var hiddenField = document.getElementById('billedProducts');
        if (hiddenField.value != "") {
            e.target.submit();
        } else {
            // Trigger Modal dialog
            document.querySelector(".prod-modal").click();
        }
    })

</script>

<%- include("partials/footer"); -%>